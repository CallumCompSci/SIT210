#include <WiFiS3.h>
//Internet connection
#include "secrets.h"
#include <ArduinoMqttClient.h>
#include <Ultrasonic.h>
#include "Arduino_LED_Matrix.h"

//button setup
const int buttonPin = 2;
int buttonState = 0;

//Ultrasonic setup
Ultrasonic ultrasonic(4);

//LED matrix setup
ArduinoLEDMatrix matrix;

//Internet connection params
const char* ssid = SECRET_SSID;
const char* pass = SECRET_PASS;
int status = WL_IDLE_STATUS;

WiFiClient client;
MqttClient mqttClient(client);


//MQTT params
const char broker[] = "broker.emqx.io";
int port = 1883;
const char topic [] = "SIT210/wave";
const char topic2 [] = "SIT210/pat";
const long publishTimer = 5000;
long previousWaveTime = 0;
long actualTime = 0;

//range param
long range = 0;

//At what distance does an object have to be to treat it as a wave?
int waveThreshold = 30;

//The matrix arrays for the wave animations
const uint32_t animation[][4] = {
	{
		0xf00f00f0,
		0xf00f00f,
		0xf00f00,
		66
	},
	{
		0xff0ff0ff,
		0xff0ff0f,
		0xf0ff0ff0,
		66
	},
	{
		0xffffffff,
		0xffffffff,
		0xffffffff,
		66
	},
	{
		0xff,
		0xffffffff,
		0xffffffff,
		66
	},
	{
		0x0,
		0xffff,
		0xffffffff,
		66
	},
	{
		0x0,
		0x0,
		0xffffff,
		66
	},
	{
		0x0,
		0x0,
		0x0,
		66
	}
};

//The wave array for incoming messages (wave)
const uint32_t faces1[][4] = {
	{
		0x79e7f,
		0xe79e0000,
		0x1f0000,
		66
	},
	{
		0x79e7f,
		0xe79e0002,
		0x1f0000,
		66
	},
	{
		0x79e7f,
		0xe79e0000,
		0x1f0000,
		66
	},
	{
		0x79e7f,
		0xe79e0002,
		0x1f0000,
		66
	},
	{
		0x79e7f,
		0xe79e0200,
		0x10060000,
		66
	}
};

//The wave array for incoming messages (pat)
const uint32_t faces2[][4] = {
	{
		0x29410,
		0x80000002,
		0x41f8000,
		66
	},
	{
		0x29410,
		0x80000f01,
		0xf81f80f0,
		66
	},
	{
		0x29410,
		0x80000001,
		0xf80f0000,
		66
	}
};

//Prints the network the Arduino has connected to
void PrintNetwork()
{
  Serial.print("WiFi Status: ");
  Serial.println(WiFi.status());
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);
}

//Wifi connection method
void ConnectWiFi()
{
  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
  Serial.println("Communication with WiFi module failed!");
  while (true);
  }
  String fv = WiFi.firmwareVersion();
  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
  Serial.println("Please upgrade the firmware");
  }
  // Attempt to connect to WiFi network:

  while (status != WL_CONNECTED) {
  Serial.print("Attempting to connect to WPA SSID: ");
  Serial.println(ssid);
  // Connect to WPA/WPA2 network:
  status = WiFi.begin(ssid, pass);
  // wait 10 seconds for connection:
  delay(10000);
  }
  // You're connected now, so print out the data:
  Serial.println("You're connected to Wifi");
  PrintNetwork();
}


//Detects the wave
bool detectWave()
{
  //How long do you have to perform the wave before it times out?
  long timeOut = 3000;
  long time = millis();
  bool waveMoved = false;
  Serial.println("wave 1 detected");

  while (millis() < time + timeOut)
  {
    range = ultrasonic.MeasureInCentimeters();
    if (!waveMoved && millis() > time + 300 && range > waveThreshold)
    {
      Serial.println("Wave moved");
      waveMoved = true;              
    }

    if (waveMoved == true && range < waveThreshold)
    {
      return true;      
    }
    //delay is required to avoid constant reading
    delay(10);
  }
  return false;
}

//Used for displaying lights when the user waves
void playAnimation(int frame)
{
  long time = millis();
  if (frame == 2)
  do {
    if (millis() - time < 1000){matrix.loadFrame(animation[2]);}
    if (millis() - time > 1000 && millis() - time < 1500){matrix.loadFrame(animation[3]);}
    if (millis() - time > 1500 && millis() - time < 2000){matrix.loadFrame(animation[4]);}
    if (millis() - time > 2000 && millis() - time < 2500){matrix.loadFrame(animation[5]);}
    if (millis() - time > 2500 && millis() - time < 3000){matrix.loadFrame(animation[6]);}
  } while (millis() - time < 3000);
  else {matrix.loadFrame(animation[frame]);}
}

//Used for incoming messages
void playWaveAnimation()
{
  long time = millis();
  //Display faces animation for 5 seconds
  do
  {
    
    if (millis() - time > 0 && millis() - time < 1000){matrix.loadFrame(faces1[0]);}
    else if (millis() - time > 1400 && millis() - time < 2400){matrix.loadFrame(faces1[1]);}
    else if (millis() - time > 2800 && millis() - time < 3800){matrix.loadFrame(faces1[2]);}
    else if (millis() - time > 4200 && millis() - time < 5200){matrix.loadFrame(faces1[3]);}
    else if (millis() - time > 6000 && millis() - time < 7000){matrix.loadFrame(faces1[4]);}
    else {matrix.loadFrame(animation[6]);}
  } while (millis() - time < 7000);
  matrix.loadFrame(animation[6]);
}

void playPatAnimation()
{
  long time = millis();
  //Display faces animation for 5 seconds
  do
  {
    
    if (millis() - time > 0 && millis() - time < 1500){matrix.loadFrame(faces2[0]);}
    else if (millis() - time > 2000 && millis() - time < 3500){matrix.loadFrame(faces2[1]);}
    else if (millis() - time > 4000 && millis() - time < 5500){matrix.loadFrame(faces2[2]);}
    else {matrix.loadFrame(animation[6]);}
  } while (millis() - time < 5500);
  matrix.loadFrame(animation[6]);
}

//Publishes the MQTT wave
void sendWave(const char theTopic [])
{
  // Post some debugging information on serial port
    Serial.print("[MQTT]: Sending message to topic: ");
    Serial.println(theTopic);
    Serial.println("Callum Ritchie");

    // Publish message
    mqttClient.beginMessage(theTopic);
    mqttClient.print("Callum Ritchie");
    mqttClient.endMessage();
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  //button pin setup
  pinMode(buttonPin, INPUT);
  //R4 pixel matrix setup
  matrix.begin();
  //Connects to the wifi
  ConnectWiFi();
  //Connects to the brokers server
  Serial.print("Attempting to connect to the MQTT broker: ");
  Serial.println(broker);
  if (!mqttClient.connect(broker, port)) {
    Serial.print("MQTT connection failed! Error code = ");
    Serial.println(mqttClient.connectError());
    while (1);
  }
  Serial.println("You're connected to the MQTT broker!");
  Serial.println();

 
  mqttClient.onMessage(onMqttMessage);
  //Subscribe to the topic
  Serial.print("subscribing to: ");
  Serial.println(topic);
  
  mqttClient.subscribe(topic);

  Serial.print("subscribing to: ");
  Serial.println(topic2);
  
  mqttClient.subscribe(topic2);


}

void loop() {
  // read button
  buttonState = digitalRead(buttonPin);
  //range is in centimeters
  range = ultrasonic.MeasureInCentimeters();
  
  actualTime = millis();
  //If "wave" is detected, run detect wave
  if (range < waveThreshold && millis() - previousWaveTime > 5000)
  {
    //play animation for wave 2
    playAnimation(0);
    //Check for 2nd wave
    if (detectWave() )
    {
      //Play animation for wave 2
      playAnimation(1); 
      //Check for 3rd wave     
      if (detectWave())
      {
        playAnimation(2);
        if (buttonState == HIGH) {sendWave(topic2);}
        else {sendWave(topic);}
        

        previousWaveTime = millis();
      }     
      else {playAnimation(6);} 
    }
    else {playAnimation(6);} 
  }

  mqttClient.poll();
  delay(100);

}

void onMqttMessage(int messageSize)
{
  String msgTopic = mqttClient.messageTopic();
  Serial.print("Message recieved from: ");   
  Serial.println(msgTopic);

  if (millis() - previousWaveTime > 3000)
  {
    while (mqttClient.available()) 
    {
      Serial.print((char)mqttClient.read());
    }
    Serial.println();
    Serial.println();

    if (msgTopic == "SIT210/wave")
    {
      playWaveAnimation();
    }
    else if (msgTopic == "SIT210/pat")
    {
      playPatAnimation();
    }
  }
  else
  {
    Serial.println("Message received, it is probably your own message");
  }

}


