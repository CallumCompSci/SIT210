#include <Ultrasonic.h>
#include <avr/io.h>
#include <avr/interrupt.h>


const int buttonPin = 9;
const int ledPin = 13;
const int blueLedPin = 5;
const int motionPin = 11;

//Button state

uint8_t ledState = LOW;
uint8_t blueLedState = LOW;

bool motionState = false;


void setup() {
  Serial.begin(9600);
  delay(2000);
  pinMode(buttonPin, INPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(motionPin, INPUT);

  //set timer1 
  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1  = 0;
  // set compare match register
  OCR1A = 46872;// = (16*10^6) / (1*1024) - 1 (must be <65536)
  // turn on CTC mode
  TCCR1B |= (1 << WGM12);
  // Set CS10 and CS12 bits for 1024 prescaler
  TCCR1B |= (1 << CS12) | (1 << CS10);  
  // enable timer compare interrupt
  TIMSK1 |= (1 << OCIE1A);


  PCICR |= B00000001;
  PCMSK0 |= B00000010;
  PCMSK0 |= B00001000;
}

void loop()
{
  delay(2000);
}




void toggle()
{
  ledState = ! ledState;
  digitalWrite(ledPin, ledState);
}

void toggleBlue()
{
  blueLedState = ! blueLedState;
  digitalWrite(blueLedPin, blueLedState);
}

ISR (PCINT0_vect) {

  static bool lastButtonState = LOW;
  bool buttonState = digitalRead(buttonPin);
  if (buttonState && lastButtonState == LOW)
  {
    toggle();
    Serial.println("Button interrupt");
  }
  lastButtonState = buttonState;

  if (digitalRead(motionPin) != motionState)
  {
    toggle();
    motionState = !motionState;
    Serial.println("Motion interrupt");
  }

}

ISR(TIMER1_COMPA_vect){//timer1 interrupt 1Hz toggles pin 13 (LED)
//generates pulse wave of frequency 1Hz/2 = 0.5kHz (takes two cycles for full wave- toggle high then toggle low)
  toggleBlue();
  Serial.println("Timer interrupt");
}

